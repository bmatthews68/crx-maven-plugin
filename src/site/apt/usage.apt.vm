 ------
 Usage
 ------
 Brian Matthews
 ------
 2012-07-27
 ------

~~ Copyright 2012 Brian Matthews
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

Usage

  The CRX Maven Plugin is used to package and sign a Google Chrome Extension. There are two ways to use the CRX
  Maven Plugin.

  If the packaging type defined in the <<pom.xml>> is <<crx>>, the <<package>> lifecycle phase can be used:

+----+
mvn package
+----+

  or using the {{{./crx-mojo.html}crx:crx}} goal:

+----+
mvn crx:crx
+----+

Using the crx packaging

  To enable the <<crx>> packaging type, the POM or one of its ancestors you must include this plugin dependency
  declaration with <<\<extensions/\>>> set to <<true>>.

+----+
<project>
  ...
  <packaging>crx</packaging>
  ...
  <build>
    ...
    <plugins>
      ...
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <extensions>true</extensions>
        <configuration>
          ...
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>
+----+

Using the crx:crx goal

  When the Google Chrome Extension is not the primary artifact being produced you only need to include this
  plugin dependency declaration.

+----+
<project>
  ...
  <build>
    ...
    <plugins>
      ...
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>${project.artifactId}</artifactId>
        <version>${project.version}</version>
        <configuration>
          ...
        </configuration>
      </plugin>
      ...
    </plugins>
    ...
  </build>
  ...
</project>
+----+

  You should add the <<${project.groupId}>> prefix to <<\<pluginGroups/\>>> in your <<~/settings.xml>> in
  order to avoid having to supply explicitly specify the groupId when invoking the <<crx:crx>> goal.

+----+
<pluginGroups>
  ...
  <pluginGroup>${project.groupId}</pluginGroup>
  ...
 </pluginGroups>
+----+